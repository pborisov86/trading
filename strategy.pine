//@version=6
strategy(title="Quad Rotation Stochastics Strategy", shorttitle="%QRS Strategy%", overlay=false, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// === Inputs ===
kLen1    = input.int(9,  title="%K Length 1",    minval=1)
smoothK1 = input.int(1,  title="%K Smoothing 1", minval=1)
dLen1    = input.int(3,  title="%D Length 1",    minval=1)

kLen2    = input.int(14, title="%K Length 2",    minval=1)
smoothK2 = input.int(1,  title="%K Smoothing 2", minval=1)
dLen2    = input.int(3,  title="%D Length 2",    minval=1)

kLen3    = input.int(40, title="%K Length 3",    minval=1)
smoothK3 = input.int(1,  title="%K Smoothing 3", minval=1)
dLen3    = input.int(4,  title="%D Length 3",    minval=1)

kLen4    = input.int(60, title="%K Length 4",    minval=1)
smoothK4 = input.int(1,  title="%K Smoothing 4", minval=1)
dLen4    = input.int(10, title="%D Length 4",    minval=1)

// === Calculations ===
k1 = ta.sma(ta.stoch(close, high, low, kLen1), smoothK1)
d1 = ta.sma(k1, dLen1)
k2 = ta.sma(ta.stoch(close, high, low, kLen2), smoothK2)
d2 = ta.sma(k2, dLen2)
k3 = ta.sma(ta.stoch(close, high, low, kLen3), smoothK3)
d3 = ta.sma(k3, dLen3)
k4 = ta.sma(ta.stoch(close, high, low, kLen4), smoothK4)
d4 = ta.sma(k4, dLen4)

// vertical offsets
offset1 = d1 + 300
offset2 = d2 + 200
offset3 = d3 + 100
offset4 = d4

// === Plot the 4 D‐lines ===
plot(offset1, title="D 9",  color=color.white,  linewidth=2)
plot(offset2, title="D 14", color=color.green,  linewidth=2)
plot(offset3, title="D 40", color=color.red,    linewidth=2)
plot(offset4, title="D 60", color=color.yellow, linewidth=2)

// === Zone lines ===
hline(320, "Oversold (D9)",    color=color.white,  linestyle=hline.style_dotted)
hline(380, "Overbought (D9)",  color=color.white,  linestyle=hline.style_dotted)
hline(220, "Oversold (D14)",   color=color.green,  linestyle=hline.style_dotted)
hline(280, "Overbought (D14)", color=color.green,  linestyle=hline.style_dotted)
hline(120, "Oversold (D40)",   color=color.red,    linestyle=hline.style_dotted)
hline(180, "Overbought (D40)", color=color.red,    linestyle=hline.style_dotted)
hline(20,  "Oversold (D60)",   color=color.yellow, linestyle=hline.style_dotted)
hline(80,  "Overbought (D60)", color=color.yellow, linestyle=hline.style_dotted)

// Separators
hline(0,   "", color=color.gray)
hline(100, "", color=color.gray)
hline(200, "", color=color.gray)
hline(300, "", color=color.gray)
hline(400, "", color=color.gray)

// === Overbought / Oversold Quad‐Stoch Signals ===
signalOverbought = offset1 > 385 and offset2 > 285 and offset3 > 185 and offset4 > 85
signalOversold   = offset1 < 315 and offset2 < 215 and offset3 < 115 and offset4 < 15

plot(signalOverbought ? 410 : na, title="Sell Signal", color=color.rgb(5,247,13), style=plot.style_circles, linewidth=3)
plot(signalOversold   ? -10  : na, title="Buy Signal",  color=color.rgb(252,6,6), style=plot.style_circles, linewidth=3)

alertcondition(signalOverbought, title="Overbought Alert", message="Quad Stochastic Overbought!")
alertcondition(signalOversold,   title="Oversold Alert",   message="Quad Stochastic Oversold!")

// === Divergence Detection State ===
var float lowestD1ValueSinceLow1 = na
var float lowestD2ValueSinceLow1 = na
var bool  pendingLow2Confirmation   = false
var int   pendingLow2BarIndex       = na
var int   startBar                  = na
var float low1                      = na
var float lowestLow                 = na
var int   lowestLowBarIndex         = na
var label low1Label                 = na
var float low1Low                   = na
var float low1High                  = na
var float low1BodyMinStored         = na
var float low1BodyMaxStored         = na

// tracker for entry bar
var int entryBarIndex = na

// vars for low2
var label low2Label               = na
var bool  canCheckForLow2         = false
var int   low1BarIndex            = na
var int   low2BarIndex            = na

// === Divergence Logic ===
// 1) Detect "Low 1" when quad‐stoch recovers from oversold zone
inLowZone    = offset1 < 320 and offset2 < 220 and offset3 < 120 and offset4 < 20
crossAbove20 = ta.crossover(offset1, 340)

if inLowZone and na(startBar)
    startBar         := bar_index
    lowestLow        := low
    lowestLowBarIndex:= bar_index

if inLowZone and not na(startBar)
    if low < lowestLow
        lowestLow        := low
        lowestLowBarIndex:= bar_index

if crossAbove20 and not na(startBar)
    low1           := lowestLow
    low1Low        := low[bar_index - lowestLowBarIndex]
    low1High       := high[bar_index - lowestLowBarIndex]
    float o1       = open[bar_index - lowestLowBarIndex]
    float c1       = close[bar_index - lowestLowBarIndex]
    low1BodyMinStored := math.min(o1, c1)
    low1BodyMaxStored := math.max(o1, c1)
    canCheckForLow2    := true
    low1BarIndex       := lowestLowBarIndex
    lowestD1ValueSinceLow1 := d1
    lowestD2ValueSinceLow1 := d2
    low1Label       := label.new(x=lowestLowBarIndex, y=-20, style=label.style_label_up, color=color.red, size=size.tiny, text="1")
    // reset
    startBar         := na
    lowestLow        := na
    lowestLowBarIndex:= na

// 2) Look for "Low 2" within 5–15 bars, without dipping D1/D2 below 20
minBarsBetween = 5
maxBarsBetween = 15
barDistance    = not na(low1BarIndex) ? bar_index - low1BarIndex : na

if canCheckForLow2
    lowestD1ValueSinceLow1 := na(lowestD1ValueSinceLow1) ? d1 : math.min(lowestD1ValueSinceLow1, d1)
    lowestD2ValueSinceLow1 := na(lowestD2ValueSinceLow1) ? d2 : math.min(lowestD2ValueSinceLow1, d2)

if canCheckForLow2 and not na(barDistance)
    float low2BodyMin  = math.min(open, close)
    bool  dblOrLower   = low2BodyMin <= low1BodyMinStored
    bool  stochsRebound= offset1 > 320 and offset1 < 360 and offset2 > 220 and offset2 < 260
    bool  d1OK         = not na(lowestD1ValueSinceLow1) and lowestD1ValueSinceLow1 >= 20
    bool  d2OK         = not na(lowestD2ValueSinceLow1) and lowestD2ValueSinceLow1 >= 20
    bool  withinWindow = barDistance >= minBarsBetween and barDistance <= maxBarsBetween

    if withinWindow
        if dblOrLower and stochsRebound and d1OK and d2OK
            pendingLow2Confirmation := true
            pendingLow2BarIndex     := bar_index
            canCheckForLow2         := false
            low2BarIndex            := bar_index
            lowestD1ValueSinceLow1  := na
            lowestD2ValueSinceLow1  := na

    if barDistance > maxBarsBetween
        // reset if too late
        canCheckForLow2           := false
        low1                      := na
        low1Low                   := na
        low1High                  := na
        low1BodyMinStored         := na
        low1BodyMaxStored         := na
        low1BarIndex              := na
        startBar                  := na

// 3) Confirm Low 2 two bars after it forms, with a strong green candle
if pendingLow2Confirmation and bar_index > pendingLow2BarIndex
    bool wasGreen    = close[1] > open[1]
    bool onConfirmBar= bar_index == pendingLow2BarIndex + 2
    float midBody    = (open[1] + close[1]) / 2
    bool strongClose = close[1] >= midBody
    if wasGreen and onConfirmBar and strongClose
        // mark Low 2 visually
        low2Label := label.new(x=pendingLow2BarIndex, y=-20, style=label.style_label_up, color=color.yellow, size=size.tiny, text="2")
        // *** STRATEGY ENTRY ***
        strategy.entry("Low2Long", strategy.long)
        entryBarIndex := bar_index
    // if past confirmation window, clear the flag
    if bar_index > pendingLow2BarIndex + 2
        pendingLow2Confirmation := false
        pendingLow2BarIndex     := na

// === Exit: Close 10 bars after entry ===
var bool highExitTriggered = false

if strategy.position_size > 0
    // 1) Immediate exit if raw %D1 dips below 20
    if ta.crossunder(d1, 20)
        strategy.close("Low2Long")
        highExitTriggered := false
    // 2) Stage exit when it first exceeds 80
    if not highExitTriggered and d1 > 80
        highExitTriggered := true
    //    then close once it crosses back under 75
    if highExitTriggered and ta.crossunder(d1, 80)
        strategy.close("Low2Long")
        highExitTriggered := false

